%% Read frames routine
% This will cycle through the selected runs and display an option to verify
% which runs you would like to compare. Then you will be asked to define
% (i) the start and stop times, and (ii) the desired frame width of the
% runs.

%% Loading in initial and final frames
clf;
m = 1;
hst     = zeros(2,4,length(selected_runs)); 

for i=1:length(selected_runs)
    if i==1
        % Find the smallest file and initialize 3 dimensional arrays (x,z,t)
        min_x = 4000;
        min_z = 1000;
        min_t = 1000;
        for j=1:length(selected_runs)
            [ncpath,wspath,info] = getRunInfo(j,experiment_path,selected_runs);
           if info.Size(1)<min_x
              min_x     = info.Size(1);
              fwidth    = 3088;
              width     = data(selected_runs(i),15);
              wratio    = (width/fwidth);
           end
           if info.Size(2)<min_z
              min_z     =  info.Size(2);
              depth     = -data(selected_runs(i),2);
           end
           if info.Size(3)<min_t
              min_t     =  info.Size(3);
              min_run   = selected_runs(i);
           end
        
        end
%         t_i = input(...
%             sprintf('Which frame would you like to start from (max is %i)?\t',...
%             min_t));
        t_i = 1;
        initial_array   = zeros(min_x,min_z,length(selected_runs));
        final_array     = zeros(size(initial_array));
    end
    
    [ncpath,wspath,info] = getRunInfo(i,experiment_path,selected_runs);
        
    initial_array(:,:,i)    =  ncread(ncpath,'anom',[1 1 t_i],...
        [min_x min_z 1]);
    final_array(:,:,i)      =  ncread(ncpath,'anom',[1 1 min_t],...
        [min_x min_z 1]);
    
    % Retrieving the pixel location of the hills at frames 't_i' and 'min_t'
    [hLL,hLR,hRL,hRR]   = getNans(initial_array(:,:,i));
    hst(1,:,i) = [hLL,hLR,hRL,hRR];
    [hLL,hLR,hRL,hRR]   = getNans(final_array(:,:,i)); 
    hst(2,:,i) = [hLL,hLR,hRL,hRR];
    
%     left_space  = [hst(1,1,i) hst(2,1,i)]*wratio;
%     right_space = width-[hst(1,4,i) hst(2,4,i)]*wratio;
    
    title_phrase = {sprintf('Run: %i frame (%i)',...
                    selected_runs(i),t_i),...
                    sprintf('Run: %i frame (%i/%i)',...
                    selected_runs(i),min_t,info.Size(3))};
    
    % Show the start and final frames
    M = size(initial_array,3);
    
    getSubPlot(M,m,initial_array(:,:,i),width,depth,title_phrase{1})
    getSubPlot(M,m+1,final_array(:,:,i),width,depth,title_phrase{2})
    
    m = m+2;
    
end

% Shift runs
prompt = input('Which runs would you like to shift (comma separated)? ','s');

if isempty(prompt)
   disp('No runs selected.')
   skipnext = true;
elseif length(prompt)>3
    prompt = split(prompt,',');
    for i=1:length(prompt)
       shift_runs(i) = str2double(prompt{i});
    end
    skipnext = false;
else 
    shift_runs = str2double(prompt);
    skipnext = false;
end

if ~skipnext
    for i=1:length(shift_runs)
        shift = input(sprintf('For run %i, how many frames would you like to shift it forward?: ',...
            shift_runs(i)));
        
        index = find(selected_runs==shift_runs(i));
        
        [ncpath,wspath,info] = getRunInfo(index,experiment_path,selected_runs);

        title_phrase = {sprintf('Run: %i frame (%i)',...
                    shift_runs(i),t_i+shift),...
                    sprintf('Run: %i frame (%i/%i)',...
                    shift_runs(i),min_t+shift,info.Size(3))};
                
        initial_array(:,:,index)    =  ncread(ncpath,'anom',[1 1 t_i+shift],...
            [min_x min_z 1]);
        final_array(:,:,index)      =  ncread(ncpath,'anom',[1 1 min_t+shift],...
            [min_x min_z 1]);
        
        [hLL,hLR,hRL,hRR]   = getNans(initial_array(:,:,index));
        hst(1,:,index) = [hLL,hLR,hRL,hRR];
        [hLL,hLR,hRL,hRR]   = getNans(final_array(:,:,index)); 
        hst(2,:,index) = [hLL,hLR,hRL,hRR];
        
        getSubPlot(M,index+2,initial_array(:,:,index),width,depth,title_phrase{1})
        getSubPlot(M,index+3,final_array(:,:,index),width,depth,title_phrase{2})
    end
end

% Get the pixel locations of the left and right-most hills from the
% selected runs
left_pad = min(min(hst(1,1,:)));
right_pad = max(max(hst(2,3,:)));

w = info.Size(1);
for i=1:length(selected_runs)
    if
end

if (info.Size(1)-right_pad)<left_pad
    r = info.Size(1)-right_pad;
else
    r = left_pad; 
end



function [ncpath,wspath,info] = getRunInfo(i,experiment_path,selected_runs)
    % Loading in the relevant .nc files
    filepath = strcat(cd,'batch3\',experiment_path{i},'\run',...
        num2str(selected_runs(i)),'\');
    
    ncfile = strcat('run',num2str(selected_runs(i)),'_densityFiles.nc');
    workspacefile = strcat('run',num2str(selected_runs(i)),'_workspace.mat');
    
    ncpath = strcat(filepath,ncfile);
    wspath = strcat(filepath,workspacefile);
    
    % Reading the anomaly variable over one tidal period
    % Get infomation about 'anom'
    info = ncinfo(ncpath,'anom');
end

function [h1,h2,h3,h4] = getNans(image)
h1 = find( isnan(image(:,80)),1);
h2 = find(~isnan(image(h1:end,80)),1)+h1;
h3 = find( isnan(image(h2:end,80)),1)+h2;
h4 = find(~isnan(image(h3:end,80)),1)+h3;
end
function getSubPlot(M,n,array,width,depth,title_name)
    subplot(M,2,n)
        image = interp2(flip(array'),-2);
        imshow(image,...
            imref2d(size(image),[0 width],[depth 0]),...
            'DisplayRange',[-2 2]);
        cmocean('thermal')
        title(title_name)
        xlabel('X position (m)')
        ylabel('Depth (m)')
end